#include "AudioDataLib/AudioSink.h"
#include "CmdLineParser.h"
#include "AudioDataLib/FileFormats/SoundFontFormat.h"
#include "AudioDataLib/FileFormats/WaveFileFormat.h"
#include "AudioDataLib/WaveForm.h"
#include "Main.h"
#include "MidiPortSource.h"
#include "MidiPortDestination.h"
#include "MidiDebugSource.h"
#include "AudioDataLib/MIDI/MidiMsgRecorderDestination.h"
#include "AudioDataLib/FileFormats/MidiFileFormat.h"
#include "AudioDataLib/MIDI/MidiPlayer.h"
#include "Keyboard.h"
#include "AudioDataLib/Mutex.h"
#include "AudioDataLib/MIDI/SimpleSynth.h"
#include "AudioDataLib/MIDI/SampleBasedSynth.h"
#include "AudioDataLib/SynthModules/LoopedAudioModule.h"
#include "AudioDataLib/SynthModules/ReverbModule.h"
#include <memory>
#include <filesystem>

using namespace AudioDataLib;

int main(int argc, char** argv)
{
	CmdLineParser parser;
	parser.SetSynopsis("This is just a basic command-line tool meant to exercise the AudioDataLib shared library.");

	parser.RegisterArg("play", 1, "Play the given file.  This can be a WAV or MIDI file.");
	parser.RegisterArg("keyboard", 1, "Receive MIDI input from the given MIDI input port.  A MIDI keyboard is not necessarily connected to the port, but could be any MIDI device.");
	parser.RegisterArg("synth", 1, "Synthesize MIDI input to the sound-card.  Use the given synth type: \"simple\", or \"sample\".");
	parser.RegisterArg("wavetable", 1, "If using the \"sample\" synth, use this option to specify the wave-table file (SF2 or DSL) to use.");
	parser.RegisterArg("record_midi", 1, "Record MIDI input to the given MIDI file.");
	parser.RegisterArg("record_wave", 1, "Record synthesized MIDI input to the given WAVE file.");
	parser.RegisterArg("log_midi", 0, "Print MIDI input to the screen as it is given.");
	parser.RegisterArg("record_wave", 1, "Record microphone input to the given WAV file.");
	parser.RegisterArg("record_dev", 1, "Record the output being generated by an audio device into the given WAV file.  This is one way to convert a MIDI file into a WAV file, if the MIDI file is playing.");
	parser.RegisterArg("mix", 3, "Mix the two given WAV files into a single WAV file, the third given output file.");
	parser.RegisterArg("concat", 3, "Concatinate the two given WAV files into a single WAV file, the third given output file.");
	parser.RegisterArg("trim_start", 2, "Trim the start of the given WAV file by the given number of seconds.  This modifies the given file.");
	parser.RegisterArg("trim_end", 2, "Truncate the given WAV file by the given number of seconds.  This modifies the given file.");
	parser.RegisterArg("help", 0, "Show the usage.");
	parser.RegisterArg("dump_info", 1, "Load the given file and then dump some stats about it.");
	parser.RegisterArg("dump_csv", 1, "Load the given file and then use it to dump a CSV to disk.");
	parser.RegisterArg("unpack", 1, "Unpack the given sound-font or DLS file by generating from it a bunch of WAV files for all the samples it contains.");
	parser.RegisterArg("device_substr", 1, "Specify a sub-string to look for when trying to select an audio device for input or output.");
	parser.RegisterArg("add_reverb", 2, "Add a reverb effect to the given WAV file.");
	
	std::string error;
	if (!parser.Parse(argc, argv, error))
	{
		if (error.length() > 0)
		{
			fprintf(stderr, ("Error: " + error).c_str());
			fprintf(stderr, "\n\n");
		}

		parser.PrintUsage(stderr);
		return -1;
	}

	if (parser.ArgGiven("help"))
	{
		parser.PrintUsage(stdout);
		return 0;
	}

	if (parser.ArgGiven("dump_info") || parser.ArgGiven("dump_csv"))
	{
		std::string filePath;

		if (parser.ArgGiven("dump_info"))
			filePath = parser.GetArgValue("dump_info", 0);
		else
			filePath = parser.GetArgValue("dump_csv", 0);

		if (!DumpInfo(filePath, parser.ArgGiven("dump_csv")))
		{
			fprintf(stderr, ErrorSystem::Get()->GetErrorMessage().c_str());
			return -1;
		}

		return 0;
	}
	
	if (parser.ArgGiven("unpack"))
	{
		const std::string& filePath = parser.GetArgValue("unpack", 0);
		if (!Unpack(filePath))
		{
			fprintf(stderr, "Failed to unpack...\n\n%s\n", ErrorSystem::Get()->GetErrorMessage().c_str());
			return -1;
		}

		return 0;
	}

	if (parser.ArgGiven("add_reverb"))
	{
		const std::string& inFilePath = parser.GetArgValue("add_reverb", 0);
		const std::string& outFilePath = parser.GetArgValue("add_reverb", 1);
		if (!AddReverb(inFilePath, outFilePath))
		{
			fprintf(stderr, ErrorSystem::Get()->GetErrorMessage().c_str());
			return -1;
		}

		return 0;
	}

	if (parser.ArgGiven("play"))
	{
		const std::string& filePath = parser.GetArgValue("play", 0);
		std::shared_ptr<FileFormat> fileFormat = FileFormat::CreateForFile(filePath);
		if (!fileFormat.get())
		{
			fprintf(stderr, "File format for file \"%s\" not recognized.\n", filePath.c_str());
			return -1;
		}

		FileInputStream inputStream(filePath.c_str());
		if (!inputStream.IsOpen())
		{
			fprintf(stderr, "Could not open file: %s\n", filePath.c_str());
			return -1;
		}

		FileData* fileData = nullptr;
		if (!fileFormat->ReadFromStream(inputStream, fileData))
		{
			fprintf(stderr, ("Error: " + ErrorSystem::Get()->GetErrorMessage()).c_str());
			return -1;
		}

		int retCode = 0;

		std::shared_ptr<MidiData> midiData(dynamic_cast<MidiData*>(fileData));
		std::shared_ptr<AudioData> audioData(dynamic_cast<AudioData*>(fileData));

		if (midiData.get())
		{
			if (!PlayMidiData(midiData.get(), parser.ArgGiven("log_midi")))
				retCode = -1;
		}
		else if (audioData.get())
		{
			if (!PlayAudioData(audioData.get(), parser))
				retCode = -1;
		}
		else
		{
			ErrorSystem::Get()->Add("Failed to cast file data!");
			delete fileData;
			retCode = -1;
		}

		if (ErrorSystem::Get()->Errors())
			fprintf(stderr, "Error: %s\n", ErrorSystem::Get()->GetErrorMessage().c_str());

		return retCode;
	}
	
	if (parser.ArgGiven("mix"))
	{
		std::string sourceFileA = parser.GetArgValue("mix", 0);
		std::string sourceFileB = parser.GetArgValue("mix", 1);
		std::string destinationFile = parser.GetArgValue("mix", 2);

		if (!MixAudio({ sourceFileA, sourceFileB }, destinationFile))
		{
			fprintf(stderr, "Error: %s\n", ErrorSystem::Get()->GetErrorMessage().c_str());
			return -1;
		}

		return 0;
	}

	if (parser.ArgGiven("keyboard"))
	{
		if (!PlayWithKeyboard(parser))
		{
			if(ErrorSystem::Get()->Errors())
				fprintf(stderr, "Error: %s\n", ErrorSystem::Get()->GetErrorMessage().c_str());
			return -1;
		}

		return 0;
	}

	fprintf(stderr, "Features not yet implimented for given arguments.  Sorry, bro.\n");
	return -1;
}

bool AddReverb(const std::string& inFilePath, const std::string& outFilePath)
{
	std::shared_ptr<FileFormat> fileFormat = FileFormat::CreateForFile(inFilePath);
	if (!fileFormat)
	{
		ErrorSystem::Get()->Add("Could not recognize file: " + inFilePath);
		return false;
	}

	FileInputStream inputStream(inFilePath.c_str());
	if (!inputStream.IsOpen())
	{
		ErrorSystem::Get()->Add("Failed to open file: " + inFilePath);
		return false;
	}

	FileData* fileData = nullptr;
	if (!fileFormat->ReadFromStream(inputStream, fileData))
	{
		ErrorSystem::Get()->Add("Failed to read file: " + inFilePath);
		return false;
	}

	std::shared_ptr<AudioData> audioData(dynamic_cast<AudioData*>(fileData));
	if (!audioData.get())
	{
		ErrorSystem::Get()->Add("Expected to get audio data from file (" + inFilePath + "), but didn't");
		delete fileData;
		return false;
	}

	if (audioData->GetFormat().numChannels == 0)
	{
		ErrorSystem::Get()->Add("No channels!");
		return false;
	}

	// TODO: I'm pretty sure this will NOT sound correct for anything other than mono based on my expiraments to-date.
	std::vector<std::shared_ptr<SynthModule>> synthModuleArray;
	for (uint16_t i = 0; i < audioData->GetFormat().numChannels; i++)
	{
		auto loopedAudioModule = new LoopedAudioModule();
		auto reverbModule = new ReverbModule(0);
		reverbModule->SetEnabled(true);
		reverbModule->AddDependentModule(std::shared_ptr<SynthModule>(loopedAudioModule));
		synthModuleArray.push_back(std::shared_ptr<SynthModule>(reverbModule));
		if (!loopedAudioModule->UseNonLoopedAudioData(audioData.get(), i))
			return false;
	}

	std::shared_ptr<AudioStream> reverbStream(new AudioStream());
	reverbStream->SetFormat(audioData->GetFormat());

	// TODO: When I shrink this time window to 0.005, I get some audible artifacting.  Why?
	double timeChunkSeconds = 0.5;
	uint64_t reverbAudioBufferSize = audioData->GetFormat().BytesFromSeconds(timeChunkSeconds);
	uint8_t* reverbAudioBuffer = new uint8_t[reverbAudioBufferSize];
	::memset(reverbAudioBuffer, 0, reverbAudioBufferSize);

	while (true)
	{
		bool moreSoundAvailable = false;
		for (std::shared_ptr<SynthModule>& synthModule : synthModuleArray)
		{
			if (synthModule->MoreSoundAvailable())
			{
				moreSoundAvailable = true;
				break;
			}
		}

		if (!moreSoundAvailable)
			break;

		for (uint16_t i = 0; i < audioData->GetFormat().numChannels; i++)
		{
			SynthModule* synthModule = synthModuleArray[i].get();

			WaveForm waveForm;
			if (!synthModule->GenerateSound(timeChunkSeconds, audioData->GetFormat().framesPerSecond, waveForm, nullptr))
				break;

			if (!waveForm.ConvertToAudioBuffer(audioData->GetFormat(), reverbAudioBuffer, reverbAudioBufferSize, i))
				break;
		}
		
		if (!ErrorSystem::Get()->Errors())
			reverbStream->WriteBytesToStream(reverbAudioBuffer, reverbAudioBufferSize);
		else
			break;
	}

	delete[] reverbAudioBuffer;

	if (ErrorSystem::Get()->Errors())
		return false;

	std::shared_ptr<AudioData> reverbAudioData(new AudioData());
	reverbAudioData->SetFormat(audioData->GetFormat());
	reverbAudioData->SetAudioBufferSize(reverbStream->GetSize());
	reverbStream->ReadBytesFromStream(reverbAudioData->GetAudioBuffer(), reverbStream->GetSize());

	FileOutputStream outputStream(outFilePath.c_str());
	if (!outputStream.IsOpen())
	{
		ErrorSystem::Get()->Add("Failed to open file: " + outFilePath);
		return false;
	}

	if (!fileFormat->WriteToStream(outputStream, reverbAudioData.get()))
	{
		ErrorSystem::Get()->Add("Failed to write file: " + outFilePath);
		return false;
	}

	return true;
}

bool PlayWithKeyboard(CmdLineParser& parser)
{
	bool success = false;
	MidiData* recordedMidiData = nullptr;
	FileOutputStream* recordedMidiOutStream = nullptr;
	MidiMsgSource* source = nullptr;
	std::string recordedMidiFilePath;
	std::string recordedWaveFilePath;
	Keyboard* keyboard = nullptr;
	SDLAudio* player = nullptr;
	std::shared_ptr<AudioStream> recordedAudioStream;

	do
	{
		// No, this isn't the keyboard we're playing with.
		// This is the computer keyboard that we'll need to exit our processing loop.
		// We're not necessarily playing with a MIDI keyboard here.  We're playing
		// with any MIDI input device.
		keyboard = Keyboard::Create();
		if (!keyboard)
		{
			ErrorSystem::Get()->Add("Failed to create keyboard object.");
			break;
		}

		if (!keyboard->Setup())
			break;

		std::string desiredPortName = parser.GetArgValue("keyboard", 0);
		if (desiredPortName == "debug")
			source = new MidiDebugSource();	// TODO: This doesn't yet work.  Too lazy to make it work right now.
		else
			source = new MidiPortSource(desiredPortName);

		if (parser.ArgGiven("log_midi"))
			source->AddDestination(std::shared_ptr<MidiMsgDestination>(new StdoutLogDestination()));

		if (parser.ArgGiven("record_midi"))
		{
			recordedMidiFilePath = parser.GetArgValue("record_midi", 0);
			if (recordedMidiFilePath.length() == 0)
			{
				ErrorSystem::Get()->Add("No MIDI file path given for recorded MIDI output.");
				break;
			}

			recordedMidiOutStream = new FileOutputStream(recordedMidiFilePath.c_str());
			if (!recordedMidiOutStream->IsOpen())
			{
				ErrorSystem::Get()->Add(std::format("Failed to open file {} for writing.", recordedMidiFilePath.c_str()));
				break;
			}

			recordedMidiData = new MidiData();
			auto recorderDestination = new MidiMsgRecorderDestination();
			recorderDestination->SetMidiData(recordedMidiData);
			source->AddDestination(std::shared_ptr<MidiMsgDestination>(recorderDestination));
		}

		if (parser.ArgGiven("synth"))
		{
			std::string synthType = parser.GetArgValue("synth", 0);

			MidiSynth* midiSynth = nullptr;

			if (synthType == "simple")
			{
				auto simpleSynth = new SimpleSynth();
				source->AddDestination(std::shared_ptr<MidiMsgDestination>(simpleSynth));
				midiSynth = simpleSynth;
			}
			else if (synthType == "sample")
			{
				auto sampleBasedSynth = new SampleBasedSynth();
				source->AddDestination(std::shared_ptr<MidiMsgDestination>(sampleBasedSynth));
				midiSynth = sampleBasedSynth;

				if (!parser.ArgGiven("wavetable"))
				{
					ErrorSystem::Get()->Add("Can't use \"sample\" synth type unless you also specify at least one wave-table file.");
					break;
				}

				std::string waveTableFile = parser.GetArgValue("wavetable", 0);
				FileInputStream inputStream(waveTableFile.c_str());
				
				std::shared_ptr<FileFormat> fileFormat(FileFormat::CreateForFile(waveTableFile));
				if (!fileFormat.get())
				{
					ErrorSystem::Get()->Add(std::format("Did not recognize file: {}", waveTableFile.c_str()));
					break;
				}

				FileData* fileData = nullptr;
				if (!fileFormat->ReadFromStream(inputStream, fileData))
				{
					ErrorSystem::Get()->Add("Failed to read file: " + waveTableFile);
					break;
				}

				std::shared_ptr<WaveTableData> waveTableData(dynamic_cast<WaveTableData*>(fileData));
				if (!waveTableData)
				{
					ErrorSystem::Get()->Add("Expected wave-table data; got something else!");
					delete fileData;
					break;
				}

				sampleBasedSynth->SetWaveTableData(waveTableData);

				// TODO: May want to expose this mapping to the command-line, but do this for now.
				for(uint8_t i = 1; i <= 16; i++)
					if (!sampleBasedSynth->SetChannelInstrument(i, i))
						break;

				if (ErrorSystem::Get()->Errors())
					break;
			}

			if (!midiSynth)
			{
				ErrorSystem::Get()->Add("Did not recognize: " + synthType);
				break;
			}

			std::shared_ptr<Mutex> mutex(new StandardMutex());
			std::shared_ptr<AudioStream> audioStream(new ThreadSafeAudioStream(mutex));
			midiSynth->SetAudioStream(audioStream);

			player = new SDLAudio(SDLAudio::AudioDirection::SOUND_OUT);
			player->SetAudioStream(midiSynth->GetAudioStream());

			if (parser.ArgGiven("record_wave"))
			{
				recordedWaveFilePath = parser.GetArgValue("record_wave", 0);
				if (recordedWaveFilePath.length() == 0)
				{
					ErrorSystem::Get()->Add("No WAVE file path given for recorded WAVE output.");
					break;
				}

				if (!player)
				{
					ErrorSystem::Get()->Add("No audio player with which to capture WAV data!");
					break;
				}

				recordedAudioStream = std::shared_ptr<AudioStream>(new AudioStream());
				player->SetRecordedAudioStream(recordedAudioStream);
			}

			std::string deviceSubStr;
			if (parser.ArgGiven("device_substr"))
				deviceSubStr = parser.GetArgValue("device_substr", 0);

			if (!player->Setup(deviceSubStr))
			{
				ErrorSystem::Get()->Add("Failed to setup SDL audio player!");
				break;
			}
		}

		if (!source->Setup())
		{
			ErrorSystem::Get()->Add("MIDI input setup failed.");
			break;
		}

		printf("Now listening to MIDI port...  (Press ESCAPE to exit.)\n");

		bool keepProcessing = true;
		while (keepProcessing)
		{
			if (!source->Process())
			{
				ErrorSystem::Get()->Add(std::format("Process error: %s\n", ErrorSystem::Get()->GetErrorMessage().c_str()));
				break;
			}

			keyboard->Process();

			Keyboard::Event event;
			while (keyboard->GetKeyboardEvent(event))
			{
				if (event.type == Keyboard::Event::Type::KEY_RELEASED)
				{
					switch (event.keyCode)
					{
						case int32_t(Keyboard::Key::KEY_ESCAPE):
						{
							keepProcessing = false;
							break;
						}
						case 'R':
						case 'r':
						{
							SampleBasedSynth* synth = source->FindDestination<SampleBasedSynth>();
							if (synth)
							{
								bool enabled = !synth->GetReverbEnabled();
								synth->SetReverbEnabled(enabled);
								printf("Reverb %s\n", (enabled ? "ON" : "OFF"));
							}
							break;
						}
						case int32_t(Keyboard::Key::KEY_PAGE_UP):
						case int32_t(Keyboard::Key::KEY_PAGE_DOWN):
						{
							SampleBasedSynth* synth = source->FindDestination<SampleBasedSynth>();
							if (synth)
							{
								MidiData::ChannelEvent channelEvent;
								channelEvent.type = MidiData::ChannelEvent::Type::PROGRAM_CHANGE;
								channelEvent.channel = 0;
								channelEvent.param1 = 0;

								// TODO: Finish writing this.  Right now, I just don't care anymore.

								//synth->ReceiveMessage()
							}
							break;
						}
					}
				}
			}
		}

		if (ErrorSystem::Get()->Errors())
			break;

		success = true;
	} while (false);

	if (keyboard)
	{
		keyboard->Shutdown();
		delete keyboard;
		keyboard = nullptr;
	}

	// Must shutdown the player before the synth so that the
	// player doesn't get caught with a stale pointer.  Yes,
	// I should probably be using shared pointers and the like.
	if (player)
	{
		player->Shutdown();
		delete player;
		player = nullptr;
	}

	if (source)
	{
		source->Shutdown();
		delete source;
		source = nullptr;
	}

	if (recordedAudioStream.get())
	{
		AudioData audioData;
		audioData.SetAudioBufferSize(recordedAudioStream->GetSize());
		audioData.SetFormat(recordedAudioStream->GetFormat());
		recordedAudioStream->ReadBytesFromStream(audioData.GetAudioBuffer(), audioData.GetAudioBufferSize());
		FileOutputStream recordedWaveOutputStream(recordedWaveFilePath.c_str());
		WaveFileFormat fileFormat;
		fileFormat.WriteToStream(recordedWaveOutputStream, &audioData);
	}

	if (recordedMidiData)
	{
		if (!recordedMidiOutStream->IsOpen())
		{
			ErrorSystem::Get()->Add("Output file stream was open before the performance started, but is not open now?!");
			success = false;
		}
		else
		{
			MidiFileFormat fileFormat;
			if (fileFormat.WriteToStream(*recordedMidiOutStream, recordedMidiData))
				printf("Saved files: %s!\n", recordedMidiFilePath.c_str());
			else
			{
				ErrorSystem::Get()->Add("Failed to write recording to the file output stream.");
				success = false;
			}
		}

		delete recordedMidiData;
		delete recordedMidiOutStream;
	}

	if (ErrorSystem::Get()->Errors())
		success = false;

	return success;
}

bool PlayMidiData(AudioDataLib::MidiData* midiData, bool logMidiMessages)
{
	bool success = false;
	SystemClockTimer timer;
	MidiPlayer player(&timer);
	Keyboard* keyboard = nullptr;

	do
	{
		keyboard = Keyboard::Create();
		if (!keyboard)
		{
			ErrorSystem::Get()->Add("Could not create keyboard!");
			break;
		}

		if (!keyboard->Setup())
			break;

		if (logMidiMessages)
			player.AddDestination(std::shared_ptr<MidiMsgDestination>(new StdoutLogDestination()));

		player.AddDestination(std::shared_ptr<MidiMsgDestination>(new MidiPortDestination()));
		player.SetMidiData(midiData);
		player.ConfigureToPlayAllTracks();
		if (!player.Setup())
			break;

		printf("MIDI file should be playing now... (Press ESCAPE to exit prematurely.\n");

		while (!player.NoMoreToPlay())
		{
			if (!player.Process())
				break;

			if (!keyboard->Process())
				break;

			Keyboard::Event event;
			if (keyboard->GetKeyboardEvent(event))
				if (event.type == Keyboard::Event::Type::KEY_PRESSED && event.keyCode == (int32_t)Keyboard::Key::KEY_ESCAPE)
					break;
		}

		if (ErrorSystem::Get()->Errors())
			break;

		if (!player.Shutdown())
			break;

		success = true;
	} while (false);

	if (keyboard)
	{
		keyboard->Shutdown();
		delete keyboard;
	}

	return success;
}

bool PlayAudioData(AudioDataLib::AudioData* audioData, CmdLineParser& parser)
{
	bool success = false;
	SDLAudio player(SDLAudio::AudioDirection::SOUND_OUT);
	AudioSink audioSink;
	Keyboard* keyboard = nullptr;

	do
	{
		keyboard = Keyboard::Create();
		if (!keyboard)
		{
			ErrorSystem::Get()->Add("Failed to create keyboard interface.");
			break;
		}

		if (!keyboard->Setup())
			break;

		std::shared_ptr<Mutex> mutex(new StandardMutex());
		std::shared_ptr<AudioStream> audioStreamOut(new ThreadSafeAudioStream(mutex));
		audioSink.SetAudioOutput(audioStreamOut);

		player.SetAudioStream(audioSink.GetAudioOutput());

		std::string deviceSubStr;
		if (parser.ArgGiven("device_substr"))
			deviceSubStr = parser.GetArgValue("device_substr", 0);

		if (!player.Setup(deviceSubStr))
		{
			ErrorSystem::Get()->Add("Failed to setup player.");
			break;
		}

		std::shared_ptr<AudioStream> audioStreamIn(new AudioStream(audioData));
		audioSink.AddAudioInput(audioStreamIn);

		printf("Sound should be playing... (Press ESCAPE to exit before the audio finishes.)\n");

		while (audioSink.GetAudioInputCount() > 0)
		{
			audioSink.GenerateAudio(0.2, 0.1);

			if (!keyboard->Process())
				break;

			Keyboard::Event event;
			if (keyboard->GetKeyboardEvent(event))
				if (event.type == Keyboard::Event::Type::KEY_PRESSED && event.keyCode == (int32_t)Keyboard::Key::KEY_ESCAPE)
					break;
		}

		if (ErrorSystem::Get()->Errors())
			break;

		success = true;
	} while (false);
	
	player.Shutdown();

	if (keyboard)
	{
		keyboard->Shutdown();
		delete keyboard;
	}

	return success;
}

bool MixAudio(const std::vector<std::string>& sourceFileArray, const std::string& destinationFile)
{
	std::vector<std::shared_ptr<FileFormat>> fileFormatArray;
	std::vector<std::shared_ptr<AudioData>> audioDataArray;

	for (const std::string& sourceFile : sourceFileArray)
	{
		std::shared_ptr<FileFormat> fileFormat = FileFormat::CreateForFile(sourceFile);
		if (!fileFormat.get())
		{
			ErrorSystem::Get()->Add("Did not recognize file type for file: " + sourceFile);
			return false;
		}

		fileFormatArray.push_back(fileFormat);
	}

	if (fileFormatArray.size() != sourceFileArray.size())
	{
		ErrorSystem::Get()->Add("Could not recognize all source file type.");
		return false;
	}

	for (int i = 0; i < (signed)sourceFileArray.size(); i++)
	{
		FileFormat* fileFormat = fileFormatArray[i].get();
		const std::string& sourceFile = sourceFileArray[i];

		FileInputStream inputStream(sourceFile.c_str());
		if (!inputStream.IsOpen())
		{
			ErrorSystem::Get()->Add(std::format("Failed to open file {} for reading.", sourceFile.c_str()));
			return false;
		}

		FileData* fileData = nullptr;
		if (!fileFormat->ReadFromStream(inputStream, fileData))
		{
			ErrorSystem::Get()->Add("Failed to read file: " + sourceFile);
			return false;
		}

		std::shared_ptr<AudioData> audioData(dynamic_cast<AudioData*>(fileData));
		if (!audioData.get())
		{
			ErrorSystem::Get()->Add(std::format("File data for file {} is not audio data.", sourceFile.c_str()));
			delete fileData;
			return false;
		}

		audioDataArray.push_back(audioData);
	}

	if (audioDataArray.size() != sourceFileArray.size())
	{
		ErrorSystem::Get()->Add("Could not load all source files.");
		return false;
	}

	AudioSink audioSink;

	AudioData::Format format;
	format.bitsPerSample = 0;

	double maxTimeSeconds = 0.0;
	for (std::shared_ptr<AudioData>& audioData : audioDataArray)
	{
		double timeSeconds = audioData->GetTimeSeconds();
		if (maxTimeSeconds < timeSeconds)
			maxTimeSeconds = timeSeconds;

		std::shared_ptr<AudioStream> audioStreamIn(new AudioStream(audioData.get()));
		audioSink.AddAudioInput(audioStreamIn);

		if (format.bitsPerSample == 0)
			format = audioData->GetFormat();
	}

	std::shared_ptr<AudioStream> audioStreamOut(new AudioStream());
	audioStreamOut->SetFormat(format);
	audioSink.SetAudioOutput(audioStreamOut);
	audioSink.GenerateAudio(maxTimeSeconds, 0.0);

	AudioData generatedAudioData;
	generatedAudioData.GetFormat() = audioStreamOut->GetFormat();
	generatedAudioData.SetAudioBufferSize(audioStreamOut->GetSize());
	audioStreamOut->ReadBytesFromStream(generatedAudioData.GetAudioBuffer(), generatedAudioData.GetAudioBufferSize());

	std::shared_ptr<FileFormat> fileFormatOut = FileFormat::CreateForFile(destinationFile);
	if (!fileFormatOut.get())
	{
		ErrorSystem::Get()->Add("Could not recognize file type for file: " + destinationFile);
		return false;
	}

	FileOutputStream outputStream(destinationFile.c_str());
	if (!outputStream.IsOpen())
	{
		ErrorSystem::Get()->Add(std::format("Could not open file {} for writing.", destinationFile.c_str()));
		return false;
	}

	if (!fileFormatOut->WriteToStream(outputStream, &generatedAudioData))
	{
		ErrorSystem::Get()->Add("Failed to write file: " + destinationFile);
		return false;
	}

	return true;
}

bool DumpInfo(const std::string& filePath, bool csv)
{
	bool success = false;
	
	FileInputStream inputStream(filePath.c_str());
	if (!inputStream.IsOpen())
	{
		ErrorSystem::Get()->Add("Failed to open file: " + filePath);
		return false;
	}

	std::shared_ptr<FileFormat> fileFormat = FileFormat::CreateForFile(filePath.c_str());
	if (!fileFormat.get())
	{
		ErrorSystem::Get()->Add("Failed type not recognized for file: " + filePath);
		return false;
	}

	FileData* fileData = nullptr;
	if (!fileFormat->ReadFromStream(inputStream, fileData))
	{
		ErrorSystem::Get()->Add("Failed to read file: " + filePath);
		return false;
	}

	if (csv)
		fileData->DumpCSV(stdout);
	else
		fileData->DumpInfo(stdout);

	delete fileData;

	return true;
}

bool Unpack(const std::string& filePath)
{
	bool success = false;
	
	std::shared_ptr<FileFormat> fileFormat = FileFormat::CreateForFile(filePath);
	if (!fileFormat)
	{
		ErrorSystem::Get()->Add("Could not recognize file type: " + filePath);
		return false;
	}

	FileInputStream inputStream(filePath.c_str());
	if (!inputStream.IsOpen())
	{
		ErrorSystem::Get()->Add("Failed to open file: " + filePath);
		return false;
	}

	FileData* fileData = nullptr;
	if (!fileFormat->ReadFromStream(inputStream, fileData))
	{
		ErrorSystem::Get()->Add("Failed to read file: " + filePath);
		return false;
	}

	std::shared_ptr<WaveTableData> waveTableData(dynamic_cast<WaveTableData*>(fileData));
	if (!waveTableData.get())
	{
		ErrorSystem::Get()->Add("Didn't get sound font data!");
		return false;
	}

	if (waveTableData->GetNumAudioSamples() == 0)
	{
		ErrorSystem::Get()->Add("No audio samples found in the sound font data!");
		return false;
	}

	WaveFileFormat waveFileFormat;

	for (uint32_t i = 0; i < waveTableData->GetNumAudioSamples(); i++)
	{
		auto audioSampleData = dynamic_cast<const SoundFontData::AudioSampleData*>(waveTableData->GetAudioSample(i));
		if (!audioSampleData)
		{
			ErrorSystem::Get()->Add(std::format("Audio at offset {} is not sample audio data.", i));
			return false;
		}
		
		std::string sampleFilePath = (std::filesystem::path(filePath).parent_path() / std::filesystem::path(filePath).stem()).string();
		sampleFilePath += "__" + audioSampleData->GetName();
		
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), ' ', '_');
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), '|', '_');
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), '(', '_');
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), ')', '_');
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), '#', 's');
		std::replace(sampleFilePath.begin(), sampleFilePath.end(), '.', '_');

		sampleFilePath += ".wav";

		FileOutputStream outputStream(sampleFilePath.c_str());
		if (!outputStream.IsOpen())
		{
			ErrorSystem::Get()->Add(std::format("Failed to open file {} for writing.", sampleFilePath.c_str()));
			return false;
		}

		if (!waveFileFormat.WriteToStream(outputStream, audioSampleData))
			return false;

		printf("Wrote file: %s\n", sampleFilePath.c_str());
	}

	printf("Wrote %d files.\n", waveTableData->GetNumAudioSamples());

	return true;
}