#pragma once

#include "AudioCommon.h"
#include "AudioData.h"

namespace AudioDataLib
{
	class AUDIO_DATA_LIB_API AudioSink
	{
	public:
		AudioSink();
		virtual ~AudioSink();

		// Make sure that at least as much of the given number of bytes is available
		// in the output audio data for the caller to be able to consume.
		// This will produce silence in the audio output if necessary.
		void MixAudio(int numBytes);
	
		// The memory for the given audio source is deleted once it has been depleted.
		void AddAudioSource(AudioData* audioData);

		// Give access to the audio stream generated by this class.
		AudioData* GetAudioOutput() { return &this->audioDataOut; }

		// Remember that this count decrements as the audio inputs are depleted.
		int GetAudioInputCount() const { return this->audioDataInArray->size(); }

	protected:
		std::vector<AudioData*>* audioDataInArray;
		AudioData audioDataOut;
	};
}