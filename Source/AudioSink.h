#pragma once

#include "AudioCommon.h"
#include "ByteStream.h"

namespace AudioDataLib
{
	// Note that this class is not thread-safe.  If it is being used as a shared resource
	// between threads, then a mutex should be used to protect access to it.
	class AUDIO_DATA_LIB_API AudioSink
	{
	public:
		AudioSink();
		virtual ~AudioSink();

		void Clear();

		// Make sure that an amount of audio data equivilant to the given amount
		// of time is available for consumption in our audio output stream.
		// This will produce silence in the audio output if necessary.
		void MixAudio(double desiredSecondsAvailable, double secondsAddedPerMix);
	
		// The memory for the given audio stream is deleted once it has been depleted.
		void AddAudioInput(AudioStream* audioStream);

		// Give access to the audio stream generated by this class.
		AudioStream* GetAudioOutput() { return this->audioStreamOut; }
		void SetAudioOutput(AudioStream* audioStreamOut);

		// Remember that this count decrements as the audio inputs are depleted.
		int GetAudioInputCount() const { return this->audioStreamInArray->size(); }

	protected:
		std::vector<AudioStream*>* audioStreamInArray;
		AudioStream* audioStreamOut;
	};
}